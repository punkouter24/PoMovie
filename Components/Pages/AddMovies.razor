@page "/addmovies"
@rendermode InteractiveServer
@using PoMovie.Models
@using PoMovie.Services
@inject HttpClient Http
@inject MovieService MovieService
@inject AuthenticationStateProvider AuthenticationStateProvider
@* @rendermode @(new InteractiveServerRenderMode(false)) *@

<h3>Add Movies</h3>

<div>
    <input @bind="searchQuery" placeholder="Enter movie title..." />
    <button @onclick="SearchMovies">Search</button>
</div>

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else if (searchResults != null)
{
    if (searchResults.Any())
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Year</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var movie in searchResults)
                {
                    <tr>
                        <td>@movie.Title</td>
                        <td>@movie.Year</td>
                        <td>
                            <button style="@(addedMovieIds.Contains(movie.Id) ? "background-color: #007bff; color: #fff;" : "")"
                                @onclick="() => AddMovie(movie)">
                                Add
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No results found.</p>
    }
}

@if (showModal)
{
    <div class="modal" tabindex="-1" style="display:block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Warning</h5>
                    <button type="button" class="btn-close" @onclick="() => showModal = false"></button>
                </div>
                <div class="modal-body">
                    <p>ALREADY SELECTED</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showModal = false">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private string searchQuery;
    private List<Movie> searchResults;
    private bool isLoading;
    private HashSet<int> addedMovieIds = new HashSet<int>();
    private bool showModal = false;


    private async Task SearchMovies()
    {
        isLoading = true;
        var apiKey = "24d49563";
        var response = await
        Http.GetFromJsonAsync<OmdbSearchResult>($"https://www.omdbapi.com/?apikey={apiKey}&s={Uri.EscapeDataString(searchQuery)}");

        if (response != null && response.Search != null)
        {
            searchResults = response.Search.Select(m => new Movie
                {
                    Title = m.Title,
                    Year = int.Parse(m.Year.Split('â€“')[0]), // Handle year ranges
                                                            // Set additional properties as needed
                }).ToList();
        }
        else
        {
            searchResults = new List<Movie>();
        }
        isLoading = false;
    }

    @* private async Task AddMovie(Movie movie)
{
var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
var user = authState.User;
if (!user.Identity.IsAuthenticated)
{
// Handle unauthenticated scenario
return;
}
var userId = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
movie.UserId = userId;

await MovieService.AddMovieAsync(movie);
addedMovieIds.Add(movie.Id);
// Optional: Provide feedback to the user that the movie was added
} *@

    private async Task AddMovie(Movie movie)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (!user.Identity.IsAuthenticated)
        {
            // Handle unauthenticated scenario
            return;
        }
        var userId = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        movie.UserId = userId;

        if (addedMovieIds.Contains(movie.Id))
        {
            // Show modal dialog
            showModal = true;
            return;
        }

        await MovieService.AddMovieAsync(movie);
        addedMovieIds.Add(movie.Id);
        // Optional: Provide feedback to the user that the movie was added
    }


    public class OmdbSearchResult
    {
        public List<OmdbMovie> Search { get; set; }
    }

    public class OmdbMovie
    {
        public string Title { get; set; }
        public string Year { get; set; }
    }
}
